{
  "name": "jquery.stellar",
  "version": "0.6.2",
  "main": [
    "./jquery.stellar.js"
  ],
  "dependencies": {
    "jquery": ">=1.4.3"
  },
  "gitHead": "f3510fbf9a88ff0b32f8f39d40dc59d68401248a",
  "readme": "[![Build Status](https://secure.travis-ci.org/markdalgleish/stellar.js.png)](http://travis-ci.org/markdalgleish/stellar.js)\n\n# [Stellar.js](http://markdalgleish.com/projects/stellar.js/) [![endorse](http://api.coderwall.com/markdalgleish/endorsecount.png)](http://coderwall.com/markdalgleish)\n\n### Parallax scrolling made easy\n\nFull guide and demonstrations available at the [official Stellar.js project page](http://markdalgleish.com/projects/stellar.js/).\n\n## Download\n\nGet the [development](https://raw.github.com/markdalgleish/stellar.js/master/jquery.stellar.js) or [production](https://raw.github.com/markdalgleish/stellar.js/master/jquery.stellar.min.js) version, or use a [package manager](https://github.com/markdalgleish/stellar.js#package-managers).\n\n## Getting Started\n\nStellar.js is a jQuery plugin that provides parallax scrolling effects to any scrolling element. The first step is to run `.stellar()` against the element:\n\n``` js\n// For example:\n$(window).stellar();\n// or:\n$('#main').stellar();\n```\n\nIf you're running Stellar.js on 'window', you can use the shorthand:\n\n``` js\n$.stellar();\n```\n\nThis will look for any parallax backgrounds or elements within the specified element and reposition them when the element scrolls.\n\n## Mobile Support\n\nSupport in Mobile WebKit browsers requires a touch scrolling library, and a slightly tweaked configuration. For a full walkthrough on how to implement this correctly, read my blog post [\"Mobile Parallax with Stellar.js\"](http://markdalgleish.com/2012/10/mobile-parallax-with-stellar-js).\n\nPlease note that parallax backgrounds are not recommended in Mobile WebKit due to performance constraints. Instead, use parallax elements with static backgrounds.\n\n## Parallax Elements\n\nIf you want elements to scroll at a different speed, add the following attribute to any element with a CSS position of absolute, relative or fixed:\n\n``` html\n<div data-stellar-ratio=\"2\">\n```\n\nThe ratio is relative to the natural scroll speed, so a ratio of 0.5 would cause the element to scroll at half-speed, a ratio of 1 would have no effect, and a ratio of 2 would cause the element to scroll at twice the speed.\n\nIf a ratio lower than 1 is causing the element to appear jittery, try setting its CSS position to fixed.\n\n## Parallax Backgrounds\n\nIf you want an element's background image to reposition on scroll, simply add the following attribute:\n\n``` html\n<div data-stellar-background-ratio=\"0.5\">\n```\n\nAs with parallax elements, the ratio is relative to the natural scroll speed. For ratios lower than 1, to avoid jittery scroll performance, set the element's CSS 'background-attachment' to fixed.\n\n## Configuring Offsets\n\nStellar.js' most powerful feature is the way it aligns elements.\n\nAll elements will return to their original positioning when their offset parent meets the edge of the screen—plus or minus your own optional offset. This allows you to create intricate parallax patterns very easily.\n\nConfused? [See how offsets are used on the Stellar.js home page.](http://markdalgleish.com/projects/stellar.js/#show-offsets)\n\nTo modify the offsets for all elements at once, pass in the options:\n\n``` js\n$.stellar({\n  horizontalOffset: 40,\n  verticalOffset: 150\n});\n```\n\nYou can also modify the offsets on a per-element basis using the following data attributes:\n\n``` html\n<div data-stellar-ratio=\"2\"\n     data-stellar-horizontal-offset=\"40\"\n     data-stellar-vertical-offset=\"150\">\n```\n\n## Configuring Offset Parents\n\nBy default, offsets are relative to the element's offset parent. This mirrors the way an absolutely positioned element behaves when nested inside an element with a relative position.\n\nAs with regular CSS, the closest parent element with a position of relative or absolute is the offset parent.\n\nTo override this and force the offset parent to be another element higher up the DOM, use the following data attribute:\n\n``` html\n<div data-stellar-offset-parent=\"true\">\n```\n\nThe offset parent can also have its own offsets:\n\n``` html\n<div data-stellar-offset-parent=\"true\"\n     data-stellar-horizontal-offset=\"40\"\n     data-stellar-vertical-offset=\"150\">\n```\n\nSimilar to CSS, the rules take precedence from element, to offset parent, to JavaScript options.\n\nConfused? [See how offset parents are used on the Stellar.js home page.](http://markdalgleish.com/projects/stellar.js/#show-offset-parents)\n\nStill confused? [See what it looks like with its default offset parents.](http://markdalgleish.com/projects/stellar.js/#show-offset-parents-default) Notice how the alignment happens on a per-letter basis? That's because each letter's containing div is its default offset parent.\n\nBy specifying the h2 element as the offset parent, we can ensure that the alignment of all the stars in a heading is based on the h2 and not the div further down the DOM tree.\n\n## Configuring Scroll Positioning\n\nYou can define what it means for an element to 'scroll'. Whether it's the element's scroll position that's changing, its margins or its CSS3 'transform' position, you can define it using the 'scrollProperty' option:\n\n``` js\n$('#gallery').stellar({\n  scrollProperty: 'transform'\n});\n```\n\nThis option is what allows you to run [Stellar.js on iOS](http://markdalgleish.com/projects/stellar.js/demos/ios.html).\n\nYou can even define how the elements are repositioned, whether it's through standard top and left properties or using CSS3 transforms:\n\n``` js\n$('#gallery').stellar({\n  positionProperty: 'transform'\n});\n```\n\nDon't have the level of control you need? Write a plugin!\n\nOtherwise, you're ready to get started!\n\n## Configuring Everything\n\nBelow you will find a complete list of options and matching default values:\n\n``` js\n$.stellar({\n  // Set scrolling to be in either one or both directions\n  horizontalScrolling: true,\n  verticalScrolling: true,\n\n  // Set the global alignment offsets\n  horizontalOffset: 0,\n  verticalOffset: 0,\n\n  // Refreshes parallax content on window load and resize\n  responsive: false,\n\n  // Select which property is used to calculate scroll.\n  // Choose 'scroll', 'position', 'margin' or 'transform',\n  // or write your own 'scrollProperty' plugin.\n  scrollProperty: 'scroll',\n\n  // Select which property is used to position elements.\n  // Choose between 'position' or 'transform',\n  // or write your own 'positionProperty' plugin.\n  positionProperty: 'position',\n\n  // Enable or disable the two types of parallax\n  parallaxBackgrounds: true,\n  parallaxElements: true,\n\n  // Hide parallax elements that move outside the viewport\n  hideDistantElements: true,\n\n  // Customise how elements are shown and hidden\n  hideElement: function($elem) { $elem.hide(); },\n  showElement: function($elem) { $elem.show(); }\n});\n```\n\n## Writing a Scroll Property Plugin\n\nOut of the box, Stellar.js supports the following scroll properties:\n'scroll', 'position', 'margin' and 'transform'.\n\nIf your method for creating a scrolling interface isn't covered by one of these, you can write your own. For example, if 'margin' didn't exist yet you could write it like so:\n\n``` js\n$.stellar.scrollProperty.margin = {\n  getLeft: function($element) {\n    return parseInt($element.css('margin-left'), 10) * -1;\n  },\n  getTop: function($element) {\n    return parseInt($element.css('margin-top'), 10) * -1;\n  }\n}\n```\n\nNow, you can specify this scroll property in Stellar.js' configuration.\n\n``` js\n$.stellar({\n  scrollProperty: 'margin'\n});\n```\n\n## Writing a Position Property Plugin\n\nStellar.js has two methods for positioning elements built in: 'position' for modifying its top and left properties, and 'transform' for using CSS3 transforms.\n\nIf you need more control over how elements are positioned, you can write your own setter functions. For example, if 'position' didn't exist yet, it could be written as a plugin like this:\n\n``` js\n$.stellar.positionProperty.position = {\n  setTop: function($element, newTop, originalTop) {\n    $element.css('top', newTop);\n  },\n  setLeft: function($element, newLeft, originalLeft) {\n    $element.css('left', newLeft);\n  }\n}\n```\n\nNow, you can specify this position property in Stellar.js' configuration.\n\n``` js\n$.stellar({\n  positionProperty: 'position'\n});\n```\n\nIf, for technical reasons, you need to set both properties at once, you can define a single 'setPosition' function:\n\n``` js\n$.stellar.positionProperty.foobar = {\n  setPosition: function($element, newLeft, originalLeft, newTop, originalTop) {\n    $element.css('transform', 'translate3d(' +\n      (newLeft - originalLeft) + 'px, ' +\n      (newTop - originalTop) + 'px, ' +\n      '0)');\n  }\n}\n\n$.stellar({\n  positionProperty: 'foobar'\n});\n```\n\n## Package Managers\n\nStellar.js can be installed with the following tools.\n\n### [Yeoman](http://yeoman.io/)\n\n``` bash\n$ yeoman install jquery.stellar\n```\n\n### [Bower](http://twitter.github.com/bower/)\n\n``` bash\n$ bower install jquery.stellar\n```\n\n## Sites Using Stellar.js\n\n* [Magic City](http://mc.starz.com)\n* [National Geographic - Alien Deep Interactive](http://channel.nationalgeographic.com/channel/alien-deep/interactives/alien-deep-interactive)\n* [François Hollande](http://www.parti-socialiste.fr/latimelineduchangement)\n* [Brabus Private Aviation](http://www.brabus-aviation.com/)\n* [IT Support London](http://www.itsupportlondon.com)\n* [Ashford University](http://bright.ashford.edu)\n* [WS Interactive](http://www.ws-interactive.fr/methode)\n* [Moire Mag - Untitled](http://www.moiremag.net/untitled)\n* [Carnival of Courage](http://www.carnivalofcourage.com.au)\n* [Ian Poulter](http://www.ianpoulter.com)\n* [360 Strategy Group](http://360strategygroup.com)\n\nI'm sure there are heaps more. [Let me know if you'd like me to feature your site here.](http://twitter.com/markdalgleish)\n\n## How to Build\n\nStellar.js uses [Node.js](nodejs.org), [Grunt](http://gruntjs.com) and [PhantomJS](http://phantomjs.org/).\n\nOnce you've got Node and PhantomJS set up, install the dependencies:\n\n`$ npm install`\n\nTo lint, test and minify the project, simply run the following command:\n\n`$ grunt`\n\nEach of the build steps are also available individually.\n\n`$ grunt test` to test the code using QUnit and PhantomJS: \n\n`$ grunt lint` to validate the code using JSHint.\n\n`$ grunt watch` to continuously lint and test the code while developing.\n\n## Contributing to Stellar.js\n\nEnsure that you successfully test and build the project with `$ grunt` before committing.\n\nMake sure that all plugin changes are made in `src/jquery.stellar.js` (`/jquery.stellar.js` and `/jquery.stellar.min.js` are generated by Grunt).\n\nIf you want to contribute in a way that changes the API, please file an issue before submitting a pull request so we can discuss how to appropriately integrate your ideas.\n\n## Questions?\n\nContact me on GitHub or Twitter: [@markdalgleish](http://twitter.com/markdalgleish)\n\n## License\n\nCopyright 2013, Mark Dalgleish  \nThis content is released under the MIT license  \nhttp://markdalgleish.mit-license.org\n",
  "readmeFilename": "README.md",
  "_id": "jquery.stellar@0.6.2",
  "description": "[![Build Status](https://secure.travis-ci.org/markdalgleish/stellar.js.png)](http://travis-ci.org/markdalgleish/stellar.js)",
  "repository": {
    "type": "git",
    "url": "git://github.com/markdalgleish/stellar.js.git"
  }
}